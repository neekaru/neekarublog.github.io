name: Convert post.txt to Markdown and Deploy Jekyll site to Pages

on:
  push:
    branches:
      - main
    paths:
      - post.txt  # Trigger action when post.txt is modified
  workflow_dispatch:  # Trigger action manually

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow write access to the repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git config
        run: |
          git config --global user.name "kang post"
          git config --global user.email "kangpost@roja.com"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Convert post.txt to Markdown
        run: |
          if [ -f post.txt ]; then
            node convertPost.js post.txt
            git add _posts
            git commit -m "Add new post(s) from post.txt"
            git push origin main
          fi
        continue-on-error: true  # Continue even if an error occurs

      - name: Remove post.txt
        run: |
          if [ -f post.txt ]; then
            node convertPost.js post.txt
            git add _posts
            git commit -m "Add new post(s) from post.txt"
            git rm post.txt || true  # Ignore errors if file doesn't exist
            git commit -m "Remove post.txt after conversion"
            git push origin main
          fi
        continue-on-error: true  # Continue even if an error occurs

  # Jekyll site build job
  jekyll_build:
    runs-on: ubuntu-latest
    needs: build  # Run this after the build job
    if: always()  # Force running even if the build job fails
    steps:
      - uses: actions/checkout@v4
      - name: Build the site in the jekyll/builder container
        run: |
          docker run \
          -v ${{ github.workspace }}:/srv/jekyll -v ${{ github.workspace }}/_site:/srv/jekyll/_site \
          jekyll/builder:latest /bin/bash -c "chmod -R 777 /srv/jekyll && jekyll build --future"

  # Deploy to GitHub Pages job
  deploy:
    runs-on: ubuntu-latest
    needs: [build, jekyll_build]
    if: always()  # Ensure deployment runs even if earlier jobs fail
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deploy Pages
  deploy_pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
